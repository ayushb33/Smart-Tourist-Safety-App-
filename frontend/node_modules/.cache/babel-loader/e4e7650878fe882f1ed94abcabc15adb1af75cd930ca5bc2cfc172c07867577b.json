{"ast":null,"code":"import _objectSpread from\"C:/YatraSathi/tourist-safety-app/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Geolocation Service for Tourist Safety System\nclass GeolocationService{constructor(){this.watchId=null;this.currentPosition=null;this.options={enableHighAccuracy:true,timeout:10000,maximumAge:60000// 1 minute\n};}// Get current position\nasync getCurrentPosition(){return new Promise((resolve,reject)=>{if(!navigator.geolocation){reject(new Error('Geolocation is not supported by this browser'));return;}navigator.geolocation.getCurrentPosition(position=>{this.currentPosition={lat:position.coords.latitude,lng:position.coords.longitude,accuracy:position.coords.accuracy,timestamp:new Date()};resolve(this.currentPosition);},error=>{reject(this.handleLocationError(error));},this.options);});}// Start watching position\nstartWatching(callback,errorCallback){if(!navigator.geolocation){errorCallback(new Error('Geolocation is not supported'));return;}this.watchId=navigator.geolocation.watchPosition(position=>{this.currentPosition={lat:position.coords.latitude,lng:position.coords.longitude,accuracy:position.coords.accuracy,timestamp:new Date()};callback(this.currentPosition);},error=>{errorCallback(this.handleLocationError(error));},this.options);return this.watchId;}// Stop watching position\nstopWatching(){if(this.watchId!==null){navigator.geolocation.clearWatch(this.watchId);this.watchId=null;}}// Handle location errors\nhandleLocationError(error){switch(error.code){case error.PERMISSION_DENIED:return new Error('Location access denied by user');case error.POSITION_UNAVAILABLE:return new Error('Location information unavailable');case error.TIMEOUT:return new Error('Location request timed out');default:return new Error('An unknown location error occurred');}}// Calculate distance between two points (Haversine formula)\ncalculateDistance(pos1,pos2){const R=6371;// Earth's radius in kilometers\nconst dLat=this.toRadians(pos2.lat-pos1.lat);const dLng=this.toRadians(pos2.lng-pos1.lng);const a=Math.sin(dLat/2)*Math.sin(dLat/2)+Math.cos(this.toRadians(pos1.lat))*Math.cos(this.toRadians(pos2.lat))*Math.sin(dLng/2)*Math.sin(dLng/2);const c=2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a));const distance=R*c;return distance;// Distance in kilometers\n}// Convert degrees to radians\ntoRadians(degrees){return degrees*(Math.PI/180);}// Check if point is within a polygon (safety zone)\nisPointInPolygon(point,polygon){let inside=false;const x=point.lat;const y=point.lng;for(let i=0,j=polygon.length-1;i<polygon.length;j=i++){const xi=polygon[i][0];const yi=polygon[i][1];const xj=polygon[j][0];const yj=polygon[j][1];if(yi>y!==yj>y&&x<(xj-xi)*(y-yi)/(yj-yi)+xi){inside=!inside;}}return inside;}// Get nearest safety zone\ngetNearestSafetyZone(position,safetyZones){let nearestZone=null;let minDistance=Infinity;safetyZones.forEach(zone=>{// Calculate distance to zone center\nconst zoneCenter=this.calculatePolygonCenter(zone.coordinates);const distance=this.calculateDistance(position,zoneCenter);if(distance<minDistance){minDistance=distance;nearestZone=_objectSpread(_objectSpread({},zone),{},{distance:distance,isInside:this.isPointInPolygon(position,zone.coordinates)});}});return nearestZone;}// Calculate polygon center (centroid)\ncalculatePolygonCenter(coordinates){let lat=0;let lng=0;coordinates.forEach(coord=>{lat+=coord[0];lng+=coord[1];});return{lat:lat/coordinates.length,lng:lng/coordinates.length};}// Format coordinates for display\nformatCoordinates(position){let precision=arguments.length>1&&arguments[1]!==undefined?arguments[1]:6;if(!position||!position.lat||!position.lng){return'Unknown location';}return\"\".concat(position.lat.toFixed(precision),\", \").concat(position.lng.toFixed(precision));}// Get location permissions status\nasync getPermissionStatus(){if(!navigator.permissions){return'unknown';}try{const permission=await navigator.permissions.query({name:'geolocation'});return permission.state;// 'granted', 'denied', or 'prompt'\n}catch(error){return'unknown';}}// Request location permissions\nasync requestPermission(){const status=await this.getPermissionStatus();if(status==='granted'){return true;}else if(status==='denied'){return false;}else{// Try to get location to trigger permission prompt\ntry{await this.getCurrentPosition();return true;}catch(error){return false;}}}// Get address from coordinates (reverse geocoding simulation)\nasync getAddressFromCoordinates(lat,lng){// In a real app, you would use a geocoding service like Google Maps or OpenStreetMap\n// For demo purposes, return a simulated address\n// Famous locations in Delhi for demo\nconst delhiLocations=[{lat:28.6139,lng:77.2090,address:'India Gate, New Delhi'},{lat:28.6507,lng:77.2334,address:'Red Fort, Old Delhi'},{lat:28.5245,lng:77.1855,address:'Qutub Minar, Mehrauli'},{lat:28.6562,lng:77.2410,address:'Jama Masjid, Old Delhi'},{lat:28.6127,lng:77.2773,address:'Lotus Temple, Kalkaji'}];// Find closest known location\nlet closestLocation=delhiLocations[0];let minDistance=this.calculateDistance({lat,lng},{lat:closestLocation.lat,lng:closestLocation.lng});delhiLocations.forEach(location=>{const distance=this.calculateDistance({lat,lng},{lat:location.lat,lng:location.lng});if(distance<minDistance){minDistance=distance;closestLocation=location;}});// If very close to a known location, return that address\nif(minDistance<0.5){// Within 500 meters\nreturn closestLocation.address;}// Otherwise return generic address\nreturn\"Near \".concat(closestLocation.address);}// Check if location services are available\nisLocationServiceAvailable(){return'geolocation'in navigator;}// Get current position with enhanced error handling\nasync getEnhancedPosition(){try{const position=await this.getCurrentPosition();const address=await this.getAddressFromCoordinates(position.lat,position.lng);return _objectSpread(_objectSpread({},position),{},{address,formatted:this.formatCoordinates(position)});}catch(error){throw error;}}// Start background location tracking for safety monitoring\nstartSafetyTracking(callback,safetyZones){return this.startWatching(position=>{const nearestZone=this.getNearestSafetyZone(position,safetyZones);callback({position,nearestZone,timestamp:new Date()});},error=>{console.error('Safety tracking error:',error);callback({error:error.message});});}}export const geolocationService=new GeolocationService();export default geolocationService;","map":{"version":3,"names":["GeolocationService","constructor","watchId","currentPosition","options","enableHighAccuracy","timeout","maximumAge","getCurrentPosition","Promise","resolve","reject","navigator","geolocation","Error","position","lat","coords","latitude","lng","longitude","accuracy","timestamp","Date","error","handleLocationError","startWatching","callback","errorCallback","watchPosition","stopWatching","clearWatch","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","calculateDistance","pos1","pos2","R","dLat","toRadians","dLng","a","Math","sin","cos","c","atan2","sqrt","distance","degrees","PI","isPointInPolygon","point","polygon","inside","x","y","i","j","length","xi","yi","xj","yj","getNearestSafetyZone","safetyZones","nearestZone","minDistance","Infinity","forEach","zone","zoneCenter","calculatePolygonCenter","coordinates","_objectSpread","isInside","coord","formatCoordinates","precision","arguments","undefined","concat","toFixed","getPermissionStatus","permissions","permission","query","name","state","requestPermission","status","getAddressFromCoordinates","delhiLocations","address","closestLocation","location","isLocationServiceAvailable","getEnhancedPosition","formatted","startSafetyTracking","console","message","geolocationService"],"sources":["C:/YatraSathi/tourist-safety-app/frontend/src/services/geolocation.js"],"sourcesContent":["// Geolocation Service for Tourist Safety System\r\nclass GeolocationService {\r\n  constructor() {\r\n    this.watchId = null;\r\n    this.currentPosition = null;\r\n    this.options = {\r\n      enableHighAccuracy: true,\r\n      timeout: 10000,\r\n      maximumAge: 60000 // 1 minute\r\n    };\r\n  }\r\n\r\n  // Get current position\r\n  async getCurrentPosition() {\r\n    return new Promise((resolve, reject) => {\r\n      if (!navigator.geolocation) {\r\n        reject(new Error('Geolocation is not supported by this browser'));\r\n        return;\r\n      }\r\n\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          this.currentPosition = {\r\n            lat: position.coords.latitude,\r\n            lng: position.coords.longitude,\r\n            accuracy: position.coords.accuracy,\r\n            timestamp: new Date()\r\n          };\r\n          resolve(this.currentPosition);\r\n        },\r\n        (error) => {\r\n          reject(this.handleLocationError(error));\r\n        },\r\n        this.options\r\n      );\r\n    });\r\n  }\r\n\r\n  // Start watching position\r\n  startWatching(callback, errorCallback) {\r\n    if (!navigator.geolocation) {\r\n      errorCallback(new Error('Geolocation is not supported'));\r\n      return;\r\n    }\r\n\r\n    this.watchId = navigator.geolocation.watchPosition(\r\n      (position) => {\r\n        this.currentPosition = {\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude,\r\n          accuracy: position.coords.accuracy,\r\n          timestamp: new Date()\r\n        };\r\n        callback(this.currentPosition);\r\n      },\r\n      (error) => {\r\n        errorCallback(this.handleLocationError(error));\r\n      },\r\n      this.options\r\n    );\r\n\r\n    return this.watchId;\r\n  }\r\n\r\n  // Stop watching position\r\n  stopWatching() {\r\n    if (this.watchId !== null) {\r\n      navigator.geolocation.clearWatch(this.watchId);\r\n      this.watchId = null;\r\n    }\r\n  }\r\n\r\n  // Handle location errors\r\n  handleLocationError(error) {\r\n    switch (error.code) {\r\n      case error.PERMISSION_DENIED:\r\n        return new Error('Location access denied by user');\r\n      case error.POSITION_UNAVAILABLE:\r\n        return new Error('Location information unavailable');\r\n      case error.TIMEOUT:\r\n        return new Error('Location request timed out');\r\n      default:\r\n        return new Error('An unknown location error occurred');\r\n    }\r\n  }\r\n\r\n  // Calculate distance between two points (Haversine formula)\r\n  calculateDistance(pos1, pos2) {\r\n    const R = 6371; // Earth's radius in kilometers\r\n    const dLat = this.toRadians(pos2.lat - pos1.lat);\r\n    const dLng = this.toRadians(pos2.lng - pos1.lng);\r\n\r\n    const a = \r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos(this.toRadians(pos1.lat)) * Math.cos(this.toRadians(pos2.lat)) *\r\n      Math.sin(dLng / 2) * Math.sin(dLng / 2);\r\n\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    const distance = R * c;\r\n\r\n    return distance; // Distance in kilometers\r\n  }\r\n\r\n  // Convert degrees to radians\r\n  toRadians(degrees) {\r\n    return degrees * (Math.PI / 180);\r\n  }\r\n\r\n  // Check if point is within a polygon (safety zone)\r\n  isPointInPolygon(point, polygon) {\r\n    let inside = false;\r\n    const x = point.lat;\r\n    const y = point.lng;\r\n\r\n    for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\r\n      const xi = polygon[i][0];\r\n      const yi = polygon[i][1];\r\n      const xj = polygon[j][0];\r\n      const yj = polygon[j][1];\r\n\r\n      if (((yi > y) !== (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi)) {\r\n        inside = !inside;\r\n      }\r\n    }\r\n\r\n    return inside;\r\n  }\r\n\r\n  // Get nearest safety zone\r\n  getNearestSafetyZone(position, safetyZones) {\r\n    let nearestZone = null;\r\n    let minDistance = Infinity;\r\n\r\n    safetyZones.forEach(zone => {\r\n      // Calculate distance to zone center\r\n      const zoneCenter = this.calculatePolygonCenter(zone.coordinates);\r\n      const distance = this.calculateDistance(position, zoneCenter);\r\n\r\n      if (distance < minDistance) {\r\n        minDistance = distance;\r\n        nearestZone = {\r\n          ...zone,\r\n          distance: distance,\r\n          isInside: this.isPointInPolygon(position, zone.coordinates)\r\n        };\r\n      }\r\n    });\r\n\r\n    return nearestZone;\r\n  }\r\n\r\n  // Calculate polygon center (centroid)\r\n  calculatePolygonCenter(coordinates) {\r\n    let lat = 0;\r\n    let lng = 0;\r\n\r\n    coordinates.forEach(coord => {\r\n      lat += coord[0];\r\n      lng += coord[1];\r\n    });\r\n\r\n    return {\r\n      lat: lat / coordinates.length,\r\n      lng: lng / coordinates.length\r\n    };\r\n  }\r\n\r\n  // Format coordinates for display\r\n  formatCoordinates(position, precision = 6) {\r\n    if (!position || !position.lat || !position.lng) {\r\n      return 'Unknown location';\r\n    }\r\n\r\n    return `${position.lat.toFixed(precision)}, ${position.lng.toFixed(precision)}`;\r\n  }\r\n\r\n  // Get location permissions status\r\n  async getPermissionStatus() {\r\n    if (!navigator.permissions) {\r\n      return 'unknown';\r\n    }\r\n\r\n    try {\r\n      const permission = await navigator.permissions.query({ name: 'geolocation' });\r\n      return permission.state; // 'granted', 'denied', or 'prompt'\r\n    } catch (error) {\r\n      return 'unknown';\r\n    }\r\n  }\r\n\r\n  // Request location permissions\r\n  async requestPermission() {\r\n    const status = await this.getPermissionStatus();\r\n\r\n    if (status === 'granted') {\r\n      return true;\r\n    } else if (status === 'denied') {\r\n      return false;\r\n    } else {\r\n      // Try to get location to trigger permission prompt\r\n      try {\r\n        await this.getCurrentPosition();\r\n        return true;\r\n      } catch (error) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Get address from coordinates (reverse geocoding simulation)\r\n  async getAddressFromCoordinates(lat, lng) {\r\n    // In a real app, you would use a geocoding service like Google Maps or OpenStreetMap\r\n    // For demo purposes, return a simulated address\r\n\r\n    // Famous locations in Delhi for demo\r\n    const delhiLocations = [\r\n      { lat: 28.6139, lng: 77.2090, address: 'India Gate, New Delhi' },\r\n      { lat: 28.6507, lng: 77.2334, address: 'Red Fort, Old Delhi' },\r\n      { lat: 28.5245, lng: 77.1855, address: 'Qutub Minar, Mehrauli' },\r\n      { lat: 28.6562, lng: 77.2410, address: 'Jama Masjid, Old Delhi' },\r\n      { lat: 28.6127, lng: 77.2773, address: 'Lotus Temple, Kalkaji' }\r\n    ];\r\n\r\n    // Find closest known location\r\n    let closestLocation = delhiLocations[0];\r\n    let minDistance = this.calculateDistance({ lat, lng }, { lat: closestLocation.lat, lng: closestLocation.lng });\r\n\r\n    delhiLocations.forEach(location => {\r\n      const distance = this.calculateDistance({ lat, lng }, { lat: location.lat, lng: location.lng });\r\n      if (distance < minDistance) {\r\n        minDistance = distance;\r\n        closestLocation = location;\r\n      }\r\n    });\r\n\r\n    // If very close to a known location, return that address\r\n    if (minDistance < 0.5) { // Within 500 meters\r\n      return closestLocation.address;\r\n    }\r\n\r\n    // Otherwise return generic address\r\n    return `Near ${closestLocation.address}`;\r\n  }\r\n\r\n  // Check if location services are available\r\n  isLocationServiceAvailable() {\r\n    return 'geolocation' in navigator;\r\n  }\r\n\r\n  // Get current position with enhanced error handling\r\n  async getEnhancedPosition() {\r\n    try {\r\n      const position = await this.getCurrentPosition();\r\n      const address = await this.getAddressFromCoordinates(position.lat, position.lng);\r\n\r\n      return {\r\n        ...position,\r\n        address,\r\n        formatted: this.formatCoordinates(position)\r\n      };\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Start background location tracking for safety monitoring\r\n  startSafetyTracking(callback, safetyZones) {\r\n    return this.startWatching(\r\n      (position) => {\r\n        const nearestZone = this.getNearestSafetyZone(position, safetyZones);\r\n        callback({\r\n          position,\r\n          nearestZone,\r\n          timestamp: new Date()\r\n        });\r\n      },\r\n      (error) => {\r\n        console.error('Safety tracking error:', error);\r\n        callback({ error: error.message });\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport const geolocationService = new GeolocationService();\r\nexport default geolocationService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import axios from 'axios';\nimport { authService } from './auth';\nimport { toast } from 'react-toastify';\n\n// API Configuration\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create axios instance\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth headers\napiClient.interceptors.request.use(config => {\n  const authHeaders = authService.getAuthHeader();\n  config.headers = {\n    ...config.headers,\n    ...authHeaders\n  };\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napiClient.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response, _error$response2;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    authService.logout();\n    toast.error('Session expired. Please login again.');\n  } else if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) >= 500) {\n    toast.error('Server error. Please try again later.');\n  } else if (error.code === 'ECONNABORTED') {\n    toast.error('Request timeout. Please check your connection.');\n  }\n  return Promise.reject(error);\n});\n\n// Tourist API endpoints\nexport const touristAPI = {\n  // Get tourist dashboard data\n  getDashboard: async () => {\n    const response = await apiClient.get('/tourist/dashboard');\n    return response.data;\n  },\n  // Update location\n  updateLocation: async locationData => {\n    const response = await apiClient.post('/tourist/location', locationData);\n    return response.data;\n  },\n  // Send SOS alert\n  sendSOSAlert: async alertData => {\n    const response = await apiClient.post('/tourist/sos', alertData);\n    return response.data;\n  },\n  // Get safety zones\n  getSafetyZones: async () => {\n    const response = await apiClient.get('/tourist/safety-zones');\n    return response.data;\n  },\n  // Safety check-in\n  safetyCheckIn: async checkInData => {\n    const response = await apiClient.post('/tourist/check-in', checkInData);\n    return response.data;\n  },\n  // Get QR code data\n  getQRData: async () => {\n    const response = await apiClient.get('/tourist/qr-data');\n    return response.data;\n  },\n  // Update emergency contacts\n  updateEmergencyContacts: async contacts => {\n    const response = await apiClient.put('/tourist/emergency-contacts', contacts);\n    return response.data;\n  }\n};\n\n// Police API endpoints\nexport const policeAPI = {\n  // Get dashboard statistics\n  getDashboard: async () => {\n    const response = await apiClient.get('/police/dashboard');\n    return response.data;\n  },\n  // Get all tourists\n  getAllTourists: async (filters = {}) => {\n    const response = await apiClient.get('/police/tourists', {\n      params: filters\n    });\n    return response.data;\n  },\n  // Get tourist details by ID\n  getTouristById: async touristId => {\n    const response = await apiClient.get(`/police/tourists/${touristId}`);\n    return response.data;\n  },\n  // Verify QR code\n  verifyQRCode: async qrData => {\n    const response = await apiClient.post('/police/verify-qr', qrData);\n    return response.data;\n  },\n  // Get alerts\n  getAlerts: async (filters = {}) => {\n    const response = await apiClient.get('/police/alerts', {\n      params: filters\n    });\n    return response.data;\n  },\n  // Update alert status\n  updateAlertStatus: async (alertId, status) => {\n    const response = await apiClient.put(`/police/alerts/${alertId}`, {\n      status\n    });\n    return response.data;\n  },\n  // Get heatmap data\n  getHeatmapData: async (timeRange = '1h') => {\n    const response = await apiClient.get('/police/heatmap', {\n      params: {\n        timeRange\n      }\n    });\n    return response.data;\n  },\n  // Send broadcast message\n  sendBroadcast: async (message, targetType = 'all') => {\n    const response = await apiClient.post('/police/broadcast', {\n      message,\n      targetType\n    });\n    return response.data;\n  },\n  // Flag tourist for monitoring\n  flagTourist: async (touristId, reason) => {\n    const response = await apiClient.post(`/police/flag-tourist/${touristId}`, {\n      reason\n    });\n    return response.data;\n  }\n};\n\n// General API utilities\nexport const generalAPI = {\n  // Health check\n  healthCheck: async () => {\n    const response = await apiClient.get('/health');\n    return response.data;\n  },\n  // Get emergency contacts\n  getEmergencyNumbers: async () => {\n    return {\n      police: '100',\n      ambulance: '102',\n      fire: '101',\n      national_emergency: '112',\n      women_helpline: '1091',\n      tourist_helpline: '1363'\n    };\n  }\n};\n\n// Mock data for development (when backend is not available)\nexport const mockData = {\n  // Sample tourist data\n  sampleTourists: [{\n    id: 'tourist-001',\n    name: 'John Doe',\n    email: 'john.doe@email.com',\n    phone: '+91 98765 43210',\n    destination: 'Delhi',\n    safetyScore: 88,\n    status: 'active',\n    location: {\n      lat: 28.6139,\n      lng: 77.2090,\n      address: 'India Gate, Delhi'\n    },\n    emergencyContact: '+91 87654 32109',\n    checkInTime: new Date(),\n    blockchainHash: 'abc123def456ghi789'\n  }, {\n    id: 'tourist-002',\n    name: 'Jane Smith',\n    email: 'jane.smith@email.com',\n    phone: '+91 98765 43211',\n    destination: 'Mumbai',\n    safetyScore: 92,\n    status: 'active',\n    location: {\n      lat: 19.0760,\n      lng: 72.8777,\n      address: 'Gateway of India, Mumbai'\n    },\n    emergencyContact: '+91 87654 32108',\n    checkInTime: new Date(Date.now() - 2 * 60 * 60000),\n    blockchainHash: 'def456ghi789jkl012'\n  }],\n  // Sample alerts\n  sampleAlerts: [{\n    id: 1,\n    type: 'SOS',\n    touristId: 'tourist-001',\n    touristName: 'John Doe',\n    message: 'Emergency SOS Alert - Immediate assistance required',\n    location: {\n      lat: 28.6139,\n      lng: 77.2090,\n      address: 'India Gate, Delhi'\n    },\n    timestamp: new Date(Date.now() - 5 * 60000),\n    status: 'active',\n    priority: 'critical'\n  }, {\n    id: 2,\n    type: 'ZONE_VIOLATION',\n    touristId: 'tourist-003',\n    touristName: 'Mike Johnson',\n    message: 'Tourist entered unsafe zone after dark',\n    location: {\n      lat: 28.6100,\n      lng: 77.2070,\n      address: 'Construction Area, Delhi'\n    },\n    timestamp: new Date(Date.now() - 15 * 60000),\n    status: 'acknowledged',\n    priority: 'high'\n  }],\n  // Sample safety zones\n  safetyZones: [{\n    id: 1,\n    name: 'Tourist District',\n    type: 'safe',\n    coordinates: [[28.6139, 77.2090], [28.6149, 77.2095], [28.6145, 77.2105], [28.6135, 77.2100]],\n    description: 'Well-patrolled tourist area with 24/7 security'\n  }, {\n    id: 2,\n    name: 'Market Area',\n    type: 'medium',\n    coordinates: [[28.6120, 77.2080], [28.6130, 77.2085], [28.6125, 77.2095], [28.6115, 77.2090]],\n    description: 'Busy commercial area - stay alert'\n  }, {\n    id: 3,\n    name: 'Construction Zone',\n    type: 'unsafe',\n    coordinates: [[28.6100, 77.2070], [28.6110, 77.2075], [28.6105, 77.2085], [28.6095, 77.2080]],\n    description: 'Active construction area - avoid after dark'\n  }]\n};\n\n// Helper function to simulate API delay for development\nexport const simulateDelay = (ms = 1000) => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\nexport default apiClient;","map":{"version":3,"names":["axios","authService","toast","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","timeout","headers","interceptors","request","use","config","authHeaders","getAuthHeader","error","Promise","reject","response","_error$response","_error$response2","status","logout","code","touristAPI","getDashboard","get","data","updateLocation","locationData","post","sendSOSAlert","alertData","getSafetyZones","safetyCheckIn","checkInData","getQRData","updateEmergencyContacts","contacts","put","policeAPI","getAllTourists","filters","params","getTouristById","touristId","verifyQRCode","qrData","getAlerts","updateAlertStatus","alertId","getHeatmapData","timeRange","sendBroadcast","message","targetType","flagTourist","reason","generalAPI","healthCheck","getEmergencyNumbers","police","ambulance","fire","national_emergency","women_helpline","tourist_helpline","mockData","sampleTourists","id","name","email","phone","destination","safetyScore","location","lat","lng","address","emergencyContact","checkInTime","Date","blockchainHash","now","sampleAlerts","type","touristName","timestamp","priority","safetyZones","coordinates","description","simulateDelay","ms","resolve","setTimeout"],"sources":["C:/tourist-safety-app/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport { authService } from './auth';\r\nimport { toast } from 'react-toastify';\r\n\r\n// API Configuration\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Create axios instance\r\nconst apiClient = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth headers\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    const authHeaders = authService.getAuthHeader();\r\n    config.headers = { ...config.headers, ...authHeaders };\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for error handling\r\napiClient.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      authService.logout();\r\n      toast.error('Session expired. Please login again.');\r\n    } else if (error.response?.status >= 500) {\r\n      toast.error('Server error. Please try again later.');\r\n    } else if (error.code === 'ECONNABORTED') {\r\n      toast.error('Request timeout. Please check your connection.');\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Tourist API endpoints\r\nexport const touristAPI = {\r\n  // Get tourist dashboard data\r\n  getDashboard: async () => {\r\n    const response = await apiClient.get('/tourist/dashboard');\r\n    return response.data;\r\n  },\r\n\r\n  // Update location\r\n  updateLocation: async (locationData) => {\r\n    const response = await apiClient.post('/tourist/location', locationData);\r\n    return response.data;\r\n  },\r\n\r\n  // Send SOS alert\r\n  sendSOSAlert: async (alertData) => {\r\n    const response = await apiClient.post('/tourist/sos', alertData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get safety zones\r\n  getSafetyZones: async () => {\r\n    const response = await apiClient.get('/tourist/safety-zones');\r\n    return response.data;\r\n  },\r\n\r\n  // Safety check-in\r\n  safetyCheckIn: async (checkInData) => {\r\n    const response = await apiClient.post('/tourist/check-in', checkInData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get QR code data\r\n  getQRData: async () => {\r\n    const response = await apiClient.get('/tourist/qr-data');\r\n    return response.data;\r\n  },\r\n\r\n  // Update emergency contacts\r\n  updateEmergencyContacts: async (contacts) => {\r\n    const response = await apiClient.put('/tourist/emergency-contacts', contacts);\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Police API endpoints\r\nexport const policeAPI = {\r\n  // Get dashboard statistics\r\n  getDashboard: async () => {\r\n    const response = await apiClient.get('/police/dashboard');\r\n    return response.data;\r\n  },\r\n\r\n  // Get all tourists\r\n  getAllTourists: async (filters = {}) => {\r\n    const response = await apiClient.get('/police/tourists', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Get tourist details by ID\r\n  getTouristById: async (touristId) => {\r\n    const response = await apiClient.get(`/police/tourists/${touristId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Verify QR code\r\n  verifyQRCode: async (qrData) => {\r\n    const response = await apiClient.post('/police/verify-qr', qrData);\r\n    return response.data;\r\n  },\r\n\r\n  // Get alerts\r\n  getAlerts: async (filters = {}) => {\r\n    const response = await apiClient.get('/police/alerts', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  // Update alert status\r\n  updateAlertStatus: async (alertId, status) => {\r\n    const response = await apiClient.put(`/police/alerts/${alertId}`, { status });\r\n    return response.data;\r\n  },\r\n\r\n  // Get heatmap data\r\n  getHeatmapData: async (timeRange = '1h') => {\r\n    const response = await apiClient.get('/police/heatmap', { params: { timeRange } });\r\n    return response.data;\r\n  },\r\n\r\n  // Send broadcast message\r\n  sendBroadcast: async (message, targetType = 'all') => {\r\n    const response = await apiClient.post('/police/broadcast', { message, targetType });\r\n    return response.data;\r\n  },\r\n\r\n  // Flag tourist for monitoring\r\n  flagTourist: async (touristId, reason) => {\r\n    const response = await apiClient.post(`/police/flag-tourist/${touristId}`, { reason });\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// General API utilities\r\nexport const generalAPI = {\r\n  // Health check\r\n  healthCheck: async () => {\r\n    const response = await apiClient.get('/health');\r\n    return response.data;\r\n  },\r\n\r\n  // Get emergency contacts\r\n  getEmergencyNumbers: async () => {\r\n    return {\r\n      police: '100',\r\n      ambulance: '102',\r\n      fire: '101',\r\n      national_emergency: '112',\r\n      women_helpline: '1091',\r\n      tourist_helpline: '1363'\r\n    };\r\n  }\r\n};\r\n\r\n// Mock data for development (when backend is not available)\r\nexport const mockData = {\r\n  // Sample tourist data\r\n  sampleTourists: [\r\n    {\r\n      id: 'tourist-001',\r\n      name: 'John Doe',\r\n      email: 'john.doe@email.com',\r\n      phone: '+91 98765 43210',\r\n      destination: 'Delhi',\r\n      safetyScore: 88,\r\n      status: 'active',\r\n      location: { lat: 28.6139, lng: 77.2090, address: 'India Gate, Delhi' },\r\n      emergencyContact: '+91 87654 32109',\r\n      checkInTime: new Date(),\r\n      blockchainHash: 'abc123def456ghi789'\r\n    },\r\n    {\r\n      id: 'tourist-002',\r\n      name: 'Jane Smith',\r\n      email: 'jane.smith@email.com',\r\n      phone: '+91 98765 43211',\r\n      destination: 'Mumbai',\r\n      safetyScore: 92,\r\n      status: 'active',\r\n      location: { lat: 19.0760, lng: 72.8777, address: 'Gateway of India, Mumbai' },\r\n      emergencyContact: '+91 87654 32108',\r\n      checkInTime: new Date(Date.now() - 2 * 60 * 60000),\r\n      blockchainHash: 'def456ghi789jkl012'\r\n    }\r\n  ],\r\n\r\n  // Sample alerts\r\n  sampleAlerts: [\r\n    {\r\n      id: 1,\r\n      type: 'SOS',\r\n      touristId: 'tourist-001',\r\n      touristName: 'John Doe',\r\n      message: 'Emergency SOS Alert - Immediate assistance required',\r\n      location: { lat: 28.6139, lng: 77.2090, address: 'India Gate, Delhi' },\r\n      timestamp: new Date(Date.now() - 5 * 60000),\r\n      status: 'active',\r\n      priority: 'critical'\r\n    },\r\n    {\r\n      id: 2,\r\n      type: 'ZONE_VIOLATION',\r\n      touristId: 'tourist-003',\r\n      touristName: 'Mike Johnson',\r\n      message: 'Tourist entered unsafe zone after dark',\r\n      location: { lat: 28.6100, lng: 77.2070, address: 'Construction Area, Delhi' },\r\n      timestamp: new Date(Date.now() - 15 * 60000),\r\n      status: 'acknowledged',\r\n      priority: 'high'\r\n    }\r\n  ],\r\n\r\n  // Sample safety zones\r\n  safetyZones: [\r\n    {\r\n      id: 1,\r\n      name: 'Tourist District',\r\n      type: 'safe',\r\n      coordinates: [\r\n        [28.6139, 77.2090],\r\n        [28.6149, 77.2095],\r\n        [28.6145, 77.2105],\r\n        [28.6135, 77.2100]\r\n      ],\r\n      description: 'Well-patrolled tourist area with 24/7 security'\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Market Area',\r\n      type: 'medium',\r\n      coordinates: [\r\n        [28.6120, 77.2080],\r\n        [28.6130, 77.2085],\r\n        [28.6125, 77.2095],\r\n        [28.6115, 77.2090]\r\n      ],\r\n      description: 'Busy commercial area - stay alert'\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Construction Zone',\r\n      type: 'unsafe',\r\n      coordinates: [\r\n        [28.6100, 77.2070],\r\n        [28.6110, 77.2075],\r\n        [28.6105, 77.2085],\r\n        [28.6095, 77.2080]\r\n      ],\r\n      description: 'Active construction area - avoid after dark'\r\n    }\r\n  ]\r\n};\r\n\r\n// Helper function to simulate API delay for development\r\nexport const simulateDelay = (ms = 1000) => {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n};\r\n\r\nexport default apiClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}